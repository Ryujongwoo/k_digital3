키바나

로그스태시와 비츠를 이용해 데이터를 수집하고 가공한 후 엘라스틱서치에 가공된 데이터를 저장하고
키바나를 이용해서 시각화 한다.

키바나의 대표적인 시각화 기능
Discover: 데이터를 도큐먼트 단위로 탐색해서 구조와 관계 등을 확인할 수 있다.
Dashboard: 그래프, 지도 등을 한 곳에서 확인하면서 다양한 정보를 확인할 수 있다.
Canvas: 그래프와 이미지 등을 PPT 슬라이드 처럼 구성할 수 있다.
Maps: 위치 기반 데이터를 지도 위에 표현할 수 있다.
Visualize Library: 다양한 그래프로 데이터를 시각화 할 수 있다.

인덱스 패턴

키바나에서 시각화를 하기 위해서는 반드시 엘라스틱서치의 인덱스에 연결되어야 하기 때문에 범용적인 
시각화 툴로 사용하기에는 무리가 있다.
오픈소스이면서 다양한 그래프와 지도를 지원하고 빅데이터 처리가 가능하다는 장점이 있다.
키바나는 데이터 소스를 엘라스틱서치 인덱스에서 가져오는데 이를 인덱스 패턴이라고 한다.
키바나는 엘라스틱서치 인덱스에 직접 접근하지 않고 인덱스 패턴이라는 구조를 한 단계 더 거친다.
인덱스 패턴은 인덱스 매핑 정보 등을 키바나에서 사용하기에 적합한 형태로 미리 캐싱해둔 것으로
여러 개의 인덱스에 따라 메타 데이터를 병합해 저장해뒀다가 검색이나 시각화 생성시 활용하게 된다.
인덱스 패턴을 만드는 이유는 복수의 인덱스에 대한 매핑을 사전에 병합해두어 쿼리 생성이나 시각화에
활용할 수 있기 때문이다.

******************************************************************************************************
Dev Tools 코드
******************************************************************************************************
PUT kibana_index1/_doc/1
{
  "name": "kim"
}

PUT kibana_index2/_doc/1
{
  "name": "lee"
}

GET /_cat/indices
GET kibana_index1/_mapping
GET kibana_index1/_search
GET kibana_index2/_mapping
GET kibana_index2/_search
******************************************************************************************************

Dev Tools에서 kibana_index1, kibana_index2라는 인덱스를 2개 생성하고 데이터가 없으면 인덱스 패턴을 
만들 수 없기 때문에 데이터를 넣어줬다.
키바나의 시각화 기능 메뉴에 들어가보면 인덱스 패턴을 생성하지 않았으므로 kibana_index1, kibana_index2
인덱스에 키바나가 접근할 수 없으므로 어떤 작업도 키바나에서 진행할 수 없다.

키바나 인텍스 패턴 만들기

햄버거 버튼 => Management => Stack Management => Kibana => Index patterns => Create index pattern 버튼 클릭
인덱스 패턴이 정상적으로 만들어졌으면 키바나의 시각화 기능 메뉴에 들어가보면 인덱스 패턴을 확인할 수 있다.

======================================================================================================

Discover

쿼리바는 KQL(Kibana Query Language)와 루씬(Lucene) 스트링 두 가지를 지원하고 기본적으로 KQL을 이용하고 
Lucene 스트링을 사용하려면 KQL 버튼을 클릭해서 Kibana Query Language를 off로 변경하면 된다.
KQL은 자동 완성 기능을 지원하므로 손쉽게 쿼리를 작성할 수 있다.

필터바는 쿼리바와 하는 역할이 비슷하지만 필드를 개별적으로 처리할 수 있다.
쿼리바는 2개 이상의 조건을 and, or 연산을 모두 실행할 수 있지만 필터바는 and 연산만 가능하다.

필터 메뉴
Pin across all apps: 필터가 사라지지 않고 Discover, Dashboard, Visualize Library에 적용된다. <=> Unpin
Edit filter: 필터를 수정한다.
Exclude reaults: 적용된 필터에 NOT 연산자를 추가한다. <=> Include reaults
Temporarily disable: 일시적으로 필터를 비활성화 한다. <=> Re-enable
Delete: 필터를 제거한다.

타임 피커는 날짜, 시간 정보를 조작해 데이터를 특정한 날짜, 시간 범위 내에서 시각화 한다.
이 기능을 사용하려면 키바나 인덱스 패턴을 생성할 때 반드시 Timestamp 필드를 설정해줘야 한다.

======================================================================================================

시각화(Visualize Library)

엘라스틱서치에 저장된 데이터를 그래프나 표, 지도 등 다양한 타입으로 보여주는 역할을 한다.
사용이 어렵지는 않지만, 엘라스틱서치의 집계를 모르면 이해가 쉽지 않다.

메트릭 집계: 합계, 평균, 최대값, 최소값, 개수 등 통계값을 계산하는 집계
버켓 집계: 특정 기준에 맞춰 데이터를 그룹화하는 집계로 서브 버켓을 생성할 수 있다.
파이프라인 집계: 집계 결과를 입력으로 받아 다시 집계한다. 부모, 형제 집계가 있다.

햄버거 버튼 => Visualize Library 클릭 => Visualize Library 화면에서 Create visualization 클릭 => 
New visualization 화면 => New visualization 클릭 => 시각화 타입 클릭

Aggregation의 Range는 사용자가 임의로 간격을 지정해서 버켓을 만드는 것으로 아래와 같은 집계를 실행해서
데이터 값의 범위를 대략이라도 알고 있어야 사용할 수 있다.
******************************************************************************************************
Dev Tools 코드
******************************************************************************************************
GET kibana_sample_data_flights/_mapping
GET kibana_sample_data_flights/_search
{
  "_source": [""],
  "size": 0,
  "aggs": {
    "week_aggs": {
      "terms": {
        "field": "dayOfWeek",
        "size": 7
      }
    }
  }
}
******************************************************************************************************

히트맵은 열분포 형태의 시각화 표현 방식이다.
막대그래프는 X축으로 버켓 집계를 Y축으로 메트릭 집계를 사용해서 만들었지만 히트맵은 3차원 처리를 위해서 
X, Y축으로 버켓 집계를 Z축(색의 진하기)으로 메트릭 집계를 사용한다.

TSVB(Time Series Visual Builder)는 시계열 데이터를 시각화 한다.
로그 모니터링이나 시간 범위 내의 특정 동작을 시각화하는데 유용하게 사용한다.

======================================================================================================

Dashboard

대시보드는 시각화 타입들을 한 페이지에 모아 볼 수 있는 기능으로, 한 화면에서 다양한 관점으로 데이터를 
보면서 분석할 수 있다.
한 화면에서 포괄적인 테이블을 볼 수 있기 때문에 중요한 의사결정을 할 수 있게 도와주고 실시간으로 모니터링할 수 있다.
대시보드를 만들기 위해서 익혀야 하는 특별한 메뉴나 기능은 없으며 시각화에서 만들었던 다양한 타입들을 잘 조합하고
배치해 한눈에 들어오도록 하는 것이 전부다.

======================================================================================================

Canvas
인포그래픽 형태로 파워포인트를 사용하는 것 처럼 화면을 편집하고 데이터를 프리젠테이션할 수 있게 해주는 툴이다.
대시보다가 강력한 기능을 제공하지만 시각화 표현이 정형화되어 있다는 느낌을 받을 수 있는데, 좀 더 자기만의
방식으로 보고서나 인포그래픽 형태의 대시보드를 원한다면 캔버스를 사용한다.
캔버스의 가장 큰 장점은 정형화된 대시보드 형식에서 벗어나 나만의 디자인 스타일에 맞춰 동적으로 데이터를 표현할
수 있다는 것이다. 이미지를 가져오거나 css 편집이 가능하다.

데이터 소스 종류
Elasticsearch SQL: 엘라스틱서치 쿼리를 사용한다.
Elasticsearch documents: 엘라스틱서치 데이터를 집계 과정 없이 가져온다.
Demo data: 프로젝트에 상관없이 데모로 제공하는 데이터를 사용해볼 수 있다.
Timelion: Timelion 문법을 이용해 시계열 데이터를 시각화 한다.


Elasticsearch SQL로 데이터를 가져오는 것이 가장 일반적이고 편리하기 때문에 Elasticsearch SQL를 많이 사용한다.
Elasticsearch SQL은 기존 SQL 문법에 익숙한 사용자를 위한 엘라스틱서치에서 제공하는 SQL이다.
엘라스틱서치는 기본적인 저장 구조나 동작 방식이 관계형 데이터베이스와 다르기 때문에 SQL 문법 지원이 쉬운일은 아니다.
Elasticsearch SQL 쿼리로 요청을 하면 엘라스틱서치 내부적으로 엘라스틱서치의 DSL 형태로 변경하고 동작한다.

******************************************************************************************************
Elasticsearch SQL 문법
******************************************************************************************************
SELECT [TOP [ count ] ] select_expr [, ...]
  [ FROM table_name ]
  [ WHERE condition ]
  [ GROUP BY grouping_element [, ...] ]
  [ HAVING condition]
  [ ORDER BY expression [ ASC | DESC ] [, ...] ]
  [ LIMIT [ count ] ]
  [ PIVOT ( aggregation_expr FOR column IN ( value [ [ AS ] alias ] [, ...] ) ) ] 
******************************************************************************************************

******************************************************************************************************
Dev Tools 코드
******************************************************************************************************
# 엘라스틱서치에서는 검색을 위해 _search API를 사용한다.
GET kibana_sample_data_flights/_mapping

# 엘라스틱서치는 SQL 명령 지원을 위해 _sql API를 제공하고 있다.
# format=txt 옵션을 사용하면 SQL 쿼리 결과를 json이 아닌 텍스트 형태로 볼 수 있다.
# SQL 명령의 실행 결과는 텍스트 형태가 json 형태보다 가독성이 더 높기 때문에 SQL 명령을 실행할 때는 format=txt 옵션을 붙여주는 것이 좋다.
# "query" 파라미터 내부에 실행할 SQL 명령을 입력하면 된다.
POST _sql?format=txt
{
  "query": "describe kibana_sample_data_flights"
}

GET kibana_sample_data_flights/_search

POST _sql?format=txt
{
  "query": "SELECT * FROM kibana_sample_data_flights"
}
# 실행할 SQL 명령이길어서 한 줄에 입력할 수 없는 경우 큰따옴표 3개 사이에 여러줄로 입력해도 된다.
POST _sql?format=txt
{
  "query": """
    SELECT * 
      FROM kibana_sample_data_flights
  """
}
******************************************************************************************************

조금 더 복잡한 Elasticsearch SQL

******************************************************************************************************
Dev Tools 코드
******************************************************************************************************
POST _sql?format=txt
{
  "query": """
    SELECT OriginCityName, DestCityName, DistanceMiles 
    FROM kibana_sample_data_flights
    WHERE OriginCityName='Seoul'
    ORDER BY DistanceMiles DESC
    LIMIT 20
  """
}
******************************************************************************************************

Elasticsearch SQL을 엘라스틱서치 DSL로 변환

******************************************************************************************************
Dev Tools 코드
******************************************************************************************************
GET kibana_sample_data_flights/_search
{
  "_source": ["OriginCityName", "DestCityName", "DistanceMiles"],
  "size": 20,
  "query": {
    "term": {
      "OriginCityName": {
        "value": "Seoul"
      }
    }
  },
  "sort": [
    {
      "DistanceMiles": {
        "order": "desc"
      }
    }
  ]
}
******************************************************************************************************

======================================================================================================

Maps

위치 정보가 포함된 데이터를 지도에 올려 시각화해볼 수 있다.
멀티 레이어 기능을 통해 다양한 형태의 지도를 레이어 화면에서 볼 수 있다.

엘라스틱서치가 제공하는 백터 레이어는 전 세계 행정구역 정보를 https://maps.elastic.co/ 에서 확인할 수 있다.
우리나라에 대해서는 South Korea Provinces(시도), South Korea Municipalities(시구군)를 제공한다. 
벡터 레이어 정보를 다운로드 받으려면 다운로드 받을 벡터 레이어를 선택하고 Download GeoJSON 버튼을 클릭하고
새 창이 열리면서 벡터 레이어 정보가 표시되면 ctrl + s를 눌러 다운 받으면 된다.

서울시 우편번호 벡터 레이어 정보가 저장된 GeoJSON 파일(TL_KODIS_BAS_11.geojson)을 다운로드 받는다.
https://github.com/onlybooks/elasticstack/blob/main/ch08/06/TL_KODIS_BAS_11.geojson
대한민국 17개 광역시/도 행정동 GEOJSON 파일
https://github.com/raqoon886/Local_HangJeongDong
대한민국 17개 광역시/도 행정동 GEOJSON 파일입니다.
https://github.com/vuski/admdongkor

구글 인공위성 맵을 사용하려면 키바나 설정 파일을 수정해야 한다.
******************************************************************************************************
kibana.yml 파일의 내용
******************************************************************************************************
map.tilemap.url:
  "https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}"
******************************************************************************************************