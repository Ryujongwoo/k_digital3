input {
  file {
    path => "C:/k_digital/kdigital/elasticStack/logstash-7.17.21/config/filter-example2.log"
    start_position => "beginning"
    sincedb_path => "nul"
  }
}

# 필터
filter {
  # dissect 필터
  dissect {
    mapping => {
      "message" => "[%{timestamp}]%{?->}[%{?id}] %{?ip} %{?port} [%{?level}] - %{?msg}"
      # message 필드에 날짜 시간이 맨 앞에 위치하므로 아래와 같이 실행해도 된다.
      # "message" => "[%{timestamp}]"
    }
  }
  # mutate 필터
  mutate {
    # mutate 플러그인의 strip을 이용해서 timestamp 필드 앞, 뒤의 공백을 제거한다.
    strip => "timestamp"
  }
  # date 필터
  date {
    # date 플러그인은 match를 이용해서 timestamp 필드에 저장된 날짜/시간 서식을 ISO8601로 변경한다.
    # 로그 스태시에서 날짜/시간 서식은 java에서 사용하는 서식과 같다. 자세한 서식은 아래 사이트를 참고한다.
    # https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html
    # "Y": 년, "M": 월, "d": 일, "H": 시(0 ~ 23), "h": 시(1 ~ 12), "m": 분, "s": 초, "S": 밀리초
    # match에 적어준 서식에 일치하는 날짜/시간 데이터가 없으면 dateparsefailure 에러가 발생된다.
    match => ["timestamp", "YYYY-MM-dd HH:mm:ss", "YYYY/MM/dd HH:mm:ss", "YYYY.MM.dd HH:mm:ss"]
    # date 플러그인은 target을 이용해서 match에서 매칭된 필드가 저장될 새 필드의 이름을 반드시 지정한다.
    target => "new_timestamp"
    # date 플러그인은 timezone을 이용해서 시간대를 설정할 수 있다.
    # timezone 생략시 한국 시간보다 9시간 느린 시간대로 설정되므로 한국 시간으로 하려면 timezone에 "UTC"를 지정한다.
    timezone => "UTC"
  }
}

output {
  stdout { }
}